---
- name: Install required packages
  apt:
    pkg: "{{ item }}"
  with_items:
    - git
    - openssl
    - curl
    - python3-pip
  become: true

- name: Create certificate farmer user account
  user:
    name: "{{lle_certificate_user}}"
    password: "{{ lle_certificate_user_password }}"
    system: yes
    shell: /bin/false
    home: "/var/lib/{{ lle_certificate_user }}"
  become: true

- name: Clone dehydrated repository from github
  git:
    umask: "027"
    repo: https://github.com/lukas2511/dehydrated.git
    dest:  "{{ lle_dehydrated_repo }}"
    force: yes
  become: true
  become_user: "{{ lle_certificate_user }}"

- name: Create file containing domains
  template:
    src: templates/domains.txt.j2
    dest: "{{ lle_dehydrated_repo}}/domains.txt"
    mode: 0600
    owner: "{{ lle_certificate_user }}"
    group: "{{ lle_certificate_user }}"
    force: true
  become: true

- name: Install dns-lexicon pip package globally
  pip:
    name: dns-lexicon
    state: present
    executable: /usr/bin/pip3
  become: true

- name: Copy hook file template
  template:
    src: templates/dehydrated.default.sh.j2
    dest: "{{ lle_dehydrated_hook_path}}"
    mode: 0700
    owner: "{{ lle_certificate_user }}"
    group: "{{ lle_certificate_user }}"
  become: true

- name: Copy dehydrated config file
  template:
    src: templates/config.j2
    dest: "{{ lle_dehydrated_repo}}/config"
    mode: 0600
    owner: "{{ lle_certificate_user }}"
    group: "{{ lle_certificate_user }}"
  become: true

- name: Register and accept Lets Encrypt CA terms and conditions
  command: "{{ lle_dehydrated_repo}}/dehydrated --register --accept-terms"
  become: true
  become_user: "{{ lle_certificate_user }}"

- name: Create certs directory
  file:
    path: "{{ lle_dehydrated_repo}}/certs"
    state: directory
    mode: 0750
    owner: "{{ lle_certificate_user }}"
    group: "{{ lle_certificate_user }}"
  become: true

- name: Copy certificate generation script (cron script)
  template:
    src: templates/letsencrypt.sh.j2
    dest: "{{ lle_scheduled_script }}"
    mode: 0700
    owner: "{{ lle_certificate_user }}"
    group: "{{ lle_certificate_user }}"
  become: true

- name: Schedule certificate generation
  cron:
      name: "letsencrypt-certificate-renewal-{{ item }}"
      user: "{{ lle_certificate_user }}"
      job: "{{ lle_scheduled_script }}"
      special_time: "{{ item }}"
  with_items:
      - weekly
      - reboot
  become: true

- name: Send cron mails to root
  cronvar:
      name: MAILTO
      value: root
      user: "{{ lle_certificate_user }}"
  become: true

- name: Create sudoers configuration for reloading services using unprivileged user
  template:
    src: templates/etc/sudoers.d/reload-service-commands.j2
    dest: "/etc/sudoers.d/{{ lle_certificate_user }}-reload-services"
    owner: root
    group: root
    mode: 0700
  become: true

- name: Run initial certificate request generation
  command: "{{ lle_scheduled_script}}"
  become: true
  become_user: "{{ lle_certificate_user }}"
